A python 3 script (AsmMeasure.py) which takes a C/CPP file as an input and measures the "distance" between markers placed in the C Code

** test.c is a example file that can be analyzed with AsmMeasure.py by typing:
python3 AsmMeasure.py test.c

This script measures the amount of assembly code generated by designated blocks of C code. This is useful because a single function call in C might take longer than 10 other lines combined. By compiling down to assembly you sort of unpack the program to its full size.

The comment markers work through inline assembly in the target C program:
__asm__("#Assembly Comment")
These comments remain in the assembly source when the C is compiled (with gcc -S or equivalent), unlike normal c comments.
This can be used to set markers in the program either directly, via "__asm__", or through a simple macro wrapper, as in test.c.

Downsides
=========
  - Pretty rudimentary
  - Doesn't account for jumps (theoretically impossible?)
  - Some lines of ASM may still take longer to execute
  - Markers still have to be placed, though possibly automatically

It still doesn't provide enough information to break code into blocks intelligently, but could still contribute to a profile of a certain section of code.
